    -- Autoři:          xfajmo05, xdunck01
    -- Téma:            Pekarna
    -- Předmět:         IDS
    -- Vytvořeno:       24.02.2023

    -----------------DROP TABLES-----------------
    DROP TABLE EMPLOYEE CASCADE CONSTRAINT;
    DROP TABLE DRIVER CASCADE CONSTRAINT;
    DROP TABLE BAKER CASCADE CONSTRAINT;
    DROP TABLE CUSTOMER CASCADE CONSTRAINT;
    DROP TABLE CAR CASCADE CONSTRAINT;
    DROP TABLE DELIVERY CASCADE CONSTRAINT;
    DROP TABLE CUSTOMER_ORDER CASCADE CONSTRAINT;
    DROP TABLE MATERIAL CASCADE CONSTRAINT;
    DROP TABLE PASTRY CASCADE CONSTRAINT;

    -- Many to many relationship tables
    DROP TABLE MATERIAL_PASTRY CASCADE CONSTRAINT;
    DROP TABLE PASTRY_ORDER CASCADE CONSTRAINT;

    DROP MATERIALIZED VIEW CARS_INFO;


    -----------------CREATE TABLES-----------------
    CREATE TABLE EMPLOYEE (
        EMPLOYEE_ID INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
        PIN INT NOT NULL,                                         -- personal identification number
        FIRSTNAME VARCHAR(255) NOT NULL,
        LASTNAME VARCHAR(255) NOT NULL,
        CONTACT VARCHAR(13) NOT NULL,
        DATE_START DATE NOT NULL,
        PAY INT NOT NULL,

        CHECK(REGEXP_LIKE(CONTACT,'\+[0-9]{12}$')),
        CHECK(PAY > 0)
    );


    CREATE TABLE DRIVER (
        DRIVER_FK INT PRIMARY KEY NOT NULL,
        DRIVER_ID VARCHAR(9) NOT NULL,
        CAR_FK INT NOT NULL,

        CONSTRAINT DRIVER_FK_CONSTRAINT FOREIGN KEY (DRIVER_FK) REFERENCES EMPLOYEE (EMPLOYEE_ID)
            ON DELETE SET NULL
    );


    CREATE TABLE BAKER (
        BAKER_FK INT PRIMARY KEY NOT NULL,

        CONSTRAINT BAKER_FK_CONSTRAINT FOREIGN KEY (BAKER_FK) REFERENCES EMPLOYEE (EMPLOYEE_ID)
            ON DELETE SET NULL
    );


    CREATE TABLE CUSTOMER (
        CUSTOMER_ID INT GENERATED AS IDENTITY NOT NULL PRIMARY KEY,
        FIRSTNAME VARCHAR(255) NOT NULL,
        LASTNAME VARCHAR(255) NOT NULL,
        CONTACT VARCHAR(13) NOT NULL,
        BANK_ACCOUNT VARCHAR(24) NOT NULL,

        CHECK(REGEXP_LIKE(CONTACT,'\+[0-9]{12}$')),             -- +420165671321
        CHECK(REGEXP_LIKE(BANK_ACCOUNT,'[A-Z]{2}[0-9]{22}$'))   -- IBAN
    );


    CREATE TABLE CAR (
        CAR_ID INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
        SPZ VARCHAR(32) NOT NULL,
        CAR_TYPE VARCHAR(255) NOT NULL,
        KM INT NOT NULL,
        FUEL_PRICE NUMBER(5,2) NOT NULL,

        CHECK(KM >= 0)
    );


    CREATE TABLE CUSTOMER_ORDER (
        ORDER_ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        DATE_ORDER TIMESTAMP NOT NULL,
        DATE_DEADLINE DATE NOT NULL,
        PICK_UP VARCHAR(32) NOT NULL,
        PRICE NUMBER(10,2) DEFAULT NULL,
        PAID NUMBER(1),                                         -- 0 not paid, 1 paid
        CUSTOMER_FK  INT NOT NULL,
        BAKER_FK INT NOT NULL,
        ORDER_STATUS VARCHAR(32) DEFAULT 'Zpracovává se',
        ADDRESS VARCHAR(255) DEFAULT 'Božetěchova 1/2, 612 00 Brno',

        CHECK(PAID IN (0,1)),
        CHECK(ORDER_STATUS IN ('Zpracovává se','Připravuje se','Čeká na odvoz','Dokončeno', 'Zrušeno', 'Nezaplaceno')),
        CHECK(PICK_UP IN ('Osobně','Dovoz')),

        CONSTRAINT CUSTOMER_CONSTRAINT FOREIGN KEY (CUSTOMER_FK) REFERENCES CUSTOMER (CUSTOMER_ID)
            ON DELETE SET NULL,
        CONSTRAINT BAKER_CONSTRAINT FOREIGN KEY (BAKER_FK) REFERENCES EMPLOYEE (EMPLOYEE_ID)
            ON DELETE SET NULL
    );


    CREATE TABLE DELIVERY (
        DELIVERY_ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        DRIVER_FK INT NOT NULL,
        ORDER_FK INT NOT NULL,
        DELIVERY_DATE DATE NOT NULL,
        KM INT NOT NULL,

        CHECK(KM >= 0),
        CONSTRAINT DRIVER_CONSTRAINT FOREIGN KEY (DRIVER_FK) REFERENCES EMPLOYEE (EMPLOYEE_ID)
            ON DELETE SET NULL,
        CONSTRAINT DELIVERY_ORDER_CONSTRAINT FOREIGN KEY (ORDER_FK) REFERENCES CUSTOMER_ORDER (ORDER_ID)
            ON DELETE SET NULL
    );


    CREATE TABLE MATERIAL (
        MATERIAL_ID INT NOT NULL PRIMARY KEY,
        MATERIAL_NAME VARCHAR(32) NOT NULL,
        STOCK NUMBER(10,2) DEFAULT 0,
        PRICE NUMBER(10,2) NOT NULL
    );


    CREATE TABLE PASTRY (
        PASTRY_ID INT NOT NULL PRIMARY KEY,
        KIND VARCHAR(10) NOT NULL,
        PASTRY_NAME VARCHAR(32) NOT NULL,
        STOCK INT DEFAULT 0,
        PRICE NUMBER(6,2) NOT NULL,
        ALERGENS VARCHAR(255) NOT NULL
    );


    CREATE TABLE MATERIAL_PASTRY (
        PASTRY_FK INT NOT NULL,
        MATERIAL_FK INT NOT NULL,
        QUANTITY_MATERIAL NUMBER(6,2) NOT NULL,

        CONSTRAINT MATERIAL_PASTRY PRIMARY KEY (PASTRY_FK,MATERIAL_FK),
        CONSTRAINT MATERIAL_PASTRY_CONSTRAINT FOREIGN KEY (PASTRY_FK) REFERENCES PASTRY (PASTRY_ID)
            ON DELETE CASCADE,
        CONSTRAINT MATERIAL_CONSTRAINT FOREIGN KEY (MATERIAL_FK) REFERENCES MATERIAL (MATERIAL_ID)
            ON DELETE CASCADE
    );


    CREATE TABLE PASTRY_ORDER (
        PASTRY_FK INT NOT NULL,
        ORDER_FK INT NOT NULL,
        QUANTITY_PASTRY INT NOT NULL,

        CONSTRAINT PASTRY_ORDER PRIMARY KEY (PASTRY_FK,ORDER_FK),
        CONSTRAINT PASTRY_ORDER_CONSTRAINT FOREIGN KEY (PASTRY_FK) REFERENCES PASTRY (PASTRY_ID)
            ON DELETE CASCADE,
        CONSTRAINT ORDER_CONSTRAINT FOREIGN KEY (ORDER_FK) REFERENCES CUSTOMER_ORDER (ORDER_ID)
            ON DELETE CASCADE
    );


    -----------------INSERT----------------------
    ------------- EMPLOYEE
    INSERT INTO EMPLOYEE (PIN, FIRSTNAME, LASTNAME, CONTACT, DATE_START, PAY) VALUES(7803142905, 'Peter', 'Novák', '+420501938430', TO_DATE('2010-01-17', 'yyyy/mm/dd'), 39000);
    INSERT INTO EMPLOYEE (PIN, FIRSTNAME, LASTNAME, CONTACT, DATE_START, PAY) VALUES(8205202341, 'Eduard', 'Perlička', '+421933922910', TO_DATE('2020-05-20', 'yyyy/mm/dd'), 30000);
    INSERT INTO EMPLOYEE (PIN, FIRSTNAME, LASTNAME, CONTACT, DATE_START, PAY) VALUES(7911239801, 'Jozef', 'Mácha', '+420903232082', TO_DATE('2009-03-02', 'yyyy/mm/dd'), 38500);
    INSERT INTO EMPLOYEE (PIN, FIRSTNAME, LASTNAME, CONTACT, DATE_START, PAY) VALUES(8911091506, 'Branislav', 'Markušovský', '+421940512683', TO_DATE('2015-05-16', 'yyyy/mm/dd'), 36250);
    INSERT INTO EMPLOYEE (PIN, FIRSTNAME, LASTNAME, CONTACT, DATE_START, PAY) VALUES(9953092345, 'Lucia', 'Ponížilová', '+420915873451', TO_DATE('2018-12-24', 'yyyy/mm/dd'), 28690);
    INSERT INTO EMPLOYEE (PIN, FIRSTNAME, LASTNAME, CONTACT, DATE_START, PAY) VALUES(5408296439, 'Dušan', 'Vaško', '+420976355876', TO_DATE('2000-01-12', 'yyyy/mm/dd'), 45900);

    ------------- DRIVER
    INSERT INTO DRIVER (DRIVER_FK, DRIVER_ID, CAR_FK) VALUES(1, 'EA 039222', 1);
    INSERT INTO DRIVER (DRIVER_FK, DRIVER_ID, CAR_FK) VALUES(4, 'N8 239760', 2);

    ------------- BAKER
    INSERT INTO BAKER (BAKER_FK) VALUES(2);
    INSERT INTO BAKER (BAKER_FK) VALUES(3);
    INSERT INTO BAKER (BAKER_FK) VALUES(5);
    INSERT INTO BAKER (BAKER_FK) VALUES(6);

    ------------- CUSTOMER
    INSERT INTO CUSTOMER (FIRSTNAME, LASTNAME, CONTACT, BANK_ACCOUNT) VALUES('Daniel', 'Kloub', '+420604839111', 'SK9011000000002600000122');
    INSERT INTO CUSTOMER (FIRSTNAME, LASTNAME, CONTACT, BANK_ACCOUNT) VALUES('Jiřina', 'Pospíšilová', '+420821636839', 'SK4302000000004191940087');
    INSERT INTO CUSTOMER (FIRSTNAME, LASTNAME, CONTACT, BANK_ACCOUNT) VALUES('Robert', 'Unikal', '+420704701548', 'CZ6571000000001449459546');
    INSERT INTO CUSTOMER (FIRSTNAME, LASTNAME, CONTACT, BANK_ACCOUNT) VALUES('Filip', 'Kolečko', '+421602199998', 'SK6351000000001419133762');
    INSERT INTO CUSTOMER (FIRSTNAME, LASTNAME, CONTACT, BANK_ACCOUNT) VALUES('Zdeněk', 'Pavlík', '+420705738078', 'CZ8419000000003800000358');
    INSERT INTO CUSTOMER (FIRSTNAME, LASTNAME, CONTACT, BANK_ACCOUNT) VALUES('Květoslav', 'Urbánek', '+420603897851', 'CZ2507000000003606430377');
    INSERT INTO CUSTOMER (FIRSTNAME, LASTNAME, CONTACT, BANK_ACCOUNT) VALUES('Růžena', 'Bílková', '+420726645250', 'CZ4303110000009192249073');

    ------------- CAR
    INSERT INTO CAR (SPZ, CAR_TYPE, KM, FUEL_PRICE) VALUES('6B3 0930', 'Dodávka', 153300, 34.90);
    INSERT INTO CAR (SPZ, CAR_TYPE, KM, FUEL_PRICE) VALUES('3B1 4897', 'Crossover', 234860, 30.50);
    INSERT INTO CAR (SPZ, CAR_TYPE, KM, FUEL_PRICE) VALUES('1B9 5679', 'Hatchback', 73890, 32.70);

    ------------- CUSTOMER_ORDER
    INSERT INTO CUSTOMER_ORDER (DATE_ORDER, DATE_DEADLINE, PICK_UP, PRICE, PAID, CUSTOMER_FK, BAKER_FK, ORDER_STATUS, ADDRESS) VALUES(TO_DATE('2022-12-03 15:42:00','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2022-12-10', 'yyyy/mm/dd'), 'Dovoz', 954.30, 1, 4, 6, 'Dokončeno', 'ulice Kosmonautů 417/3, 612 00 Brno');
    INSERT INTO CUSTOMER_ORDER (DATE_ORDER, DATE_DEADLINE, PICK_UP, PRICE, PAID, CUSTOMER_FK, BAKER_FK, ORDER_STATUS, ADDRESS) VALUES(TO_DATE('2022-12-10 16:35:43','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2022-12-12', 'yyyy/mm/dd'), 'Osobně', 449, 1, 2, 2, 'Nezaplaceno', 'Božetěchova 1/2, 612 00 Brno');
    INSERT INTO CUSTOMER_ORDER (DATE_ORDER, DATE_DEADLINE, PICK_UP, PRICE, PAID, CUSTOMER_FK, BAKER_FK, ORDER_STATUS, ADDRESS) VALUES(TO_DATE('2022-12-10 18:23:12','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2022-12-15', 'yyyy/mm/dd'), 'Dovoz', 1478.50, 1, 6, 3, 'Připravuje se', 'Slunná 277/39 664 48 Moravany');
    INSERT INTO CUSTOMER_ORDER (DATE_ORDER, DATE_DEADLINE, PICK_UP, PRICE, PAID, CUSTOMER_FK, BAKER_FK, ORDER_STATUS, ADDRESS) VALUES(TO_DATE('2022-12-11 12:11:59','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2022-12-15', 'yyyy/mm/dd'), 'Dovoz', 476.80, 1, 1, 5, 'Dokončeno', 'Štýřice 157, 639 00 Brno');
    INSERT INTO CUSTOMER_ORDER (DATE_ORDER, DATE_DEADLINE, PICK_UP, PRICE, PAID, CUSTOMER_FK, BAKER_FK, ORDER_STATUS, ADDRESS) VALUES(TO_DATE('2022-12-11 13:10:22','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2022-12-16', 'yyyy/mm/dd'), 'Dovoz', 647, 1, 3, 2, 'Dokončeno', 'Malešovská 660/19, 625 00 Brno');
    INSERT INTO CUSTOMER_ORDER (DATE_ORDER, DATE_DEADLINE, PICK_UP, PRICE, PAID, CUSTOMER_FK, BAKER_FK, ORDER_STATUS, ADDRESS) VALUES(TO_DATE('2022-12-13 11:12:47','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2022-12-16', 'yyyy/mm/dd'), 'Osobně', 645.50, 1, 5, 6, 'Připravuje se', 'Božetěchova 1/2, 612 00 Brno');
    INSERT INTO CUSTOMER_ORDER (DATE_ORDER, DATE_DEADLINE, PICK_UP, PRICE, PAID, CUSTOMER_FK, BAKER_FK, ORDER_STATUS, ADDRESS) VALUES(TO_DATE('2022-12-17 11:12:47','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2022-12-20', 'yyyy/mm/dd'), 'Dovoz', 1243.20, 0, 1, 6, 'Zrušeno', 'Štýřice 157, 639 00 Brno');
    INSERT INTO CUSTOMER_ORDER (DATE_ORDER, DATE_DEADLINE, PICK_UP, PRICE, PAID, CUSTOMER_FK, BAKER_FK, ORDER_STATUS, ADDRESS) VALUES(TO_DATE('2022-12-17 15:58:17','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2022-12-19', 'yyyy/mm/dd'), 'Osobně', 248, 1, 5, 2, 'Dokončeno', 'Božetěchova 1/2, 612 00 Brno');
    INSERT INTO CUSTOMER_ORDER (DATE_ORDER, DATE_DEADLINE, PICK_UP, PRICE, PAID, CUSTOMER_FK, BAKER_FK, ORDER_STATUS, ADDRESS) VALUES(TO_DATE('2022-12-19 07:00:24','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2022-12-23', 'yyyy/mm/dd'), 'Dovoz', 493.10, 1, 3, 5, 'Zpracovává se', 'Sirotkova 55, 616 00 Brno');
    INSERT INTO CUSTOMER_ORDER (DATE_ORDER, DATE_DEADLINE, PICK_UP, PRICE, PAID, CUSTOMER_FK, BAKER_FK, ORDER_STATUS, ADDRESS) VALUES(TO_DATE('2022-12-22 03:12:49','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2022-12-26', 'yyyy/mm/dd'), 'Dovoz', 1049.50, 0, 1, 6, 'Zrušeno', 'Štýřice 157, 639 00 Brno');
    INSERT INTO CUSTOMER_ORDER (DATE_ORDER, DATE_DEADLINE, PICK_UP, PRICE, PAID, CUSTOMER_FK, BAKER_FK, ORDER_STATUS, ADDRESS) VALUES(TO_DATE('2022-12-27 03:12:49','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2023-01-02', 'yyyy/mm/dd'), 'Dovoz', 1282.50, 1, 2, 3, 'Nezaplaceno', 'Všetičkova 629/25, 602 00 Brno');

    ------------- DELIVERY
    INSERT INTO DELIVERY (DRIVER_FK, ORDER_FK, DELIVERY_DATE, KM) VALUES(1, 1, TO_DATE('2022-12-08', 'yyyy/mm/dd'), 10);
    INSERT INTO DELIVERY (DRIVER_FK, ORDER_FK, DELIVERY_DATE, KM) VALUES(1, 3, TO_DATE('2022-12-13', 'yyyy/mm/dd'), 17);
    INSERT INTO DELIVERY (DRIVER_FK, ORDER_FK, DELIVERY_DATE, KM) VALUES(4, 4, TO_DATE('2022-12-14', 'yyyy/mm/dd'), 9);
    INSERT INTO DELIVERY (DRIVER_FK, ORDER_FK, DELIVERY_DATE, KM) VALUES(1, 5, TO_DATE('2022-12-15', 'yyyy/mm/dd'), 12);
    INSERT INTO DELIVERY (DRIVER_FK, ORDER_FK, DELIVERY_DATE, KM) VALUES(4, 9, TO_DATE('2022-12-20', 'yyyy/mm/dd'), 3);
    INSERT INTO DELIVERY (DRIVER_FK, ORDER_FK, DELIVERY_DATE, KM) VALUES(1, 11, TO_DATE('2022-12-29', 'yyyy/mm/dd'), 4);

    ------------- MATERIAL
    INSERT INTO MATERIAL (MATERIAL_ID, MATERIAL_NAME, STOCK, PRICE) VALUES(1, 'mouka hrubá', 10020, 27.90);
    INSERT INTO MATERIAL (MATERIAL_ID, MATERIAL_NAME, STOCK, PRICE) VALUES(2, 'mouka polohrubá', 8490, 28.90);
    INSERT INTO MATERIAL (MATERIAL_ID, MATERIAL_NAME, STOCK, PRICE) VALUES(3, 'mouka hladká', 9540, 28.90);
    INSERT INTO MATERIAL (MATERIAL_ID, MATERIAL_NAME, STOCK, PRICE) VALUES(4, 'mouka celozrnná', 5400, 39.90);
    INSERT INTO MATERIAL (MATERIAL_ID, MATERIAL_NAME, STOCK, PRICE) VALUES(5, 'listové těsto', 2900, 45.70);
    INSERT INTO MATERIAL (MATERIAL_ID, MATERIAL_NAME, STOCK, PRICE) VALUES(6, 'mléko', 1029, 24.90);
    INSERT INTO MATERIAL (MATERIAL_ID, MATERIAL_NAME, STOCK, PRICE) VALUES(7, 'vejce', 2400, 6.29);
    INSERT INTO MATERIAL (MATERIAL_ID, MATERIAL_NAME, STOCK, PRICE) VALUES(8, 'sůl', 2350, 34.38);
    INSERT INTO MATERIAL (MATERIAL_ID, MATERIAL_NAME, STOCK, PRICE) VALUES(9, 'džem', 1500, 234.62);
    INSERT INTO MATERIAL (MATERIAL_ID, MATERIAL_NAME, STOCK, PRICE) VALUES(10, 'nutella', 1235, 254.86);
    INSERT INTO MATERIAL (MATERIAL_ID, MATERIAL_NAME, STOCK, PRICE) VALUES(11, 'moučkový cukr', 1890, 34.90);
    INSERT INTO MATERIAL (MATERIAL_ID, MATERIAL_NAME, STOCK, PRICE) VALUES(12, 'třstinový cukr', 1642, 34.39);
    INSERT INTO MATERIAL (MATERIAL_ID, MATERIAL_NAME, STOCK, PRICE) VALUES(13, 'droždí', 200, 283.39);

    ------------- PASTRY
    INSERT INTO PASTRY (PASTRY_ID, KIND, PASTRY_NAME, STOCK, PRICE, ALERGENS) VALUES(1, 'Slané', 'Preclík', 225, 29.90, '1,3,5');
    INSERT INTO PASTRY (PASTRY_ID, KIND, PASTRY_NAME, STOCK, PRICE, ALERGENS) VALUES(2, 'Světlé', 'Chléb svetlý', 50, 39.90, '4,3,1');
    INSERT INTO PASTRY (PASTRY_ID, KIND, PASTRY_NAME, STOCK, PRICE, ALERGENS) VALUES(3, 'Celozrnné', 'Chléb celozrnný', 46, 45.90, '1,6,7');
    INSERT INTO PASTRY (PASTRY_ID, KIND, PASTRY_NAME, STOCK, PRICE, ALERGENS) VALUES(4, 'Světlé', 'Rohlík', 230, 9.90, '5,4,2');
    INSERT INTO PASTRY (PASTRY_ID, KIND, PASTRY_NAME, STOCK, PRICE, ALERGENS) VALUES(5, 'Tmavé', 'Bageta tmavá', 70, 30.00, '7,5,3');
    INSERT INTO PASTRY (PASTRY_ID, KIND, PASTRY_NAME, STOCK, PRICE, ALERGENS) VALUES(6, 'Světlé', 'Bageta svetlá', 62, 25.90, '1,4,5');
    INSERT INTO PASTRY (PASTRY_ID, KIND, PASTRY_NAME, STOCK, PRICE, ALERGENS) VALUES(7, 'Světlé', 'Croissant', 40, 19.30, '4,3,5');
    INSERT INTO PASTRY (PASTRY_ID, KIND, PASTRY_NAME, STOCK, PRICE, ALERGENS) VALUES(8, 'Sladké', 'Buchta marmeladová', 47, 45.30, '1,2,9');
    INSERT INTO PASTRY (PASTRY_ID, KIND, PASTRY_NAME, STOCK, PRICE, ALERGENS) VALUES(9, 'Sladké', 'Buchta nutellová', 43, 46.40, '1,7,8');

    ------------- MATERIAL_PASTRY
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(1, 1, 0.2);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(1, 2, 0.2);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(1, 7, 1);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(1, 8, 0.03);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(1, 13, 0.02);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(2, 3, 0.5);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(2, 8, 0.02);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(2, 13, 0.02);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(3, 4, 0.5);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(3, 8, 0.02);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(3, 12, 0.02);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(4, 3, 0.05);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(4, 6, 0.05);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(4, 7, 1);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(4, 13, 0.01);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(4, 8, 0.01);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(4, 12, 0.01);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(5, 1, 0.3);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(5, 2, 0.2);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(5, 7, 1);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(5, 8, 0.02);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(5, 12, 0.01);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(5, 13, 0.01);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(6, 3, 0.5);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(6, 7, 1);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(6, 8, 0.02);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(6, 12, 0.01);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(6, 13, 0.01);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(7, 5, 0.3);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(7, 6, 0.1);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(7, 7, 1);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(7, 8, 0.03);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(7, 12, 0.05);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(8, 2, 0.3);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(8, 3, 0.1);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(8, 6, 0.2);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(8, 9, 0.07);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(8, 11, 0.03);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(8, 13, 0.01);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(9, 2, 0.3);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(9, 3, 0.1);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(9, 6, 0.2);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(9, 10, 0.07);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(9, 11, 0.03);
    INSERT INTO MATERIAL_PASTRY (PASTRY_FK, MATERIAL_FK, QUANTITY_MATERIAL) VALUES(9, 13, 0.01);

    ------------- PASTRY_ORDER
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(1, 1, 15);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(4, 1, 30);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(7, 1, 16);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(3, 2, 10);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(5, 3, 5);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(6, 3, 5);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(8, 3, 10);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(9, 3, 15);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(3, 4, 3);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(5, 4, 4);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(7, 4, 5);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(8, 4, 3);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(1, 5, 30);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(8, 6, 7);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(9, 6, 6);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(3, 7, 3);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(8, 7, 12);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(9, 7, 14);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(4, 8, 20);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(5, 9, 7);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(6, 9, 9);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(4, 10, 19);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(7, 10, 25);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(2, 10, 11);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(9, 11, 15);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(4, 11, 16);
    INSERT INTO PASTRY_ORDER (PASTRY_FK, ORDER_FK, QUANTITY_PASTRY) VALUES(1, 11, 19);


    -----------------SELECT----------------------
    -- information about customer and his order
    SELECT
        ORDER_ID,
        ORDER_STATUS,
        DATE_ORDER,
        DATE_DEADLINE,
        PICK_UP,
        PAID,
        CUSTOMER_ID,
        (FIRSTNAME || ' ' || LASTNAME) AS "CUSTOMER"
    FROM
        CUSTOMER_ORDER
        INNER JOIN CUSTOMER ON CUSTOMER_ID = CUSTOMER_FK
    ORDER BY ORDER_ID;

    -- info about drivers
    SELECT
        EMPLOYEE_ID,
        PIN,
        (FIRSTNAME || ' ' || LASTNAME) AS "EMPLOYEE",
        CONTACT,
        DATE_START,
        PAY,
        DRIVER_ID
    FROM
        EMPLOYEE
        INNER JOIN DRIVER ON EMPLOYEE_ID = DRIVER_FK
    ORDER BY EMPLOYEE_ID;

    -- information for driver where and whom to deliver the order
    SELECT
        ORDER_ID,
        DATE_DEADLINE,
        (FIRSTNAME || ' ' || LASTNAME) AS "CUSTOMER",
        CONTACT,
        ADDRESS,
        PAID
    FROM
        CUSTOMER_ORDER
        INNER JOIN DELIVERY ON ORDER_ID = ORDER_FK
        INNER JOIN CUSTOMER ON CUSTOMER_ID = CUSTOMER_FK
    ORDER BY ORDER_ID;

    -- number of orders by pick up
    SELECT 
        PICK_UP,
        COUNT(ORDER_ID) AS "NUMBER OF ORDERS"
    FROM 
        CUSTOMER_ORDER
    GROUP BY PICK_UP
    ORDER BY PICK_UP;

    -- how much pastry is needed for orders
    SELECT
        PASTRY_FK,
        PASTRY_NAME,
        SUM(QUANTITY_PASTRY) AS "AMOUNT"
    FROM
        PASTRY INNER JOIN PASTRY_ORDER ON PASTRY_FK = PASTRY_ID
    GROUP BY PASTRY_FK, PASTRY_NAME;

    -- prints customers which have orders ready for pick up
    SELECT
        CUSTOMER_ID,
        (FIRSTNAME || ' ' || LASTNAME) AS "CUSTOMER",
        CONTACT
    FROM
        CUSTOMER
    WHERE EXISTS(SELECT ORDER_ID FROM CUSTOMER_ORDER WHERE CUSTOMER_FK = CUSTOMER_ID AND PICK_UP = 'Osobně');

    -- prints out all needed materials for current orders
    SELECT
        MATERIAL_ID,
        MATERIAL_NAME,
        SUM(QUANTITY_MATERIAL * QUANTITY_PASTRY) AS "QUANTITY NEEDED"
    FROM
        MATERIAL
        INNER JOIN MATERIAL_PASTRY ON MATERIAL_ID = MATERIAL_FK
        INNER JOIN PASTRY_ORDER ON MATERIAL_PASTRY.PASTRY_FK = PASTRY_ORDER.PASTRY_FK
    WHERE PASTRY_ORDER.ORDER_FK IN (SELECT ORDER_ID FROM CUSTOMER_ORDER WHERE ORDER_STATUS IN ('Zpracovává se','Připravuje se'))
    GROUP BY MATERIAL_ID, MATERIAL_NAME
    ORDER BY MATERIAL_ID;


    -----------------TRIGGERS----------------------
    -- cancel order if deadline of order is in past
    CREATE OR REPLACE TRIGGER CHECK_ORDER_DATE
        BEFORE INSERT ON CUSTOMER_ORDER
        FOR EACH ROW
    BEGIN
        IF :NEW.DATE_ORDER > :NEW.DATE_DEADLINE THEN
            RAISE_APPLICATION_ERROR(-20010, 'Neplatný termín dodání. Dodání musí být v budoucnosti.');
        END IF;
    END;
    /

    -- cancel order if quantity of pastry is less or equal than 0
    CREATE OR REPLACE TRIGGER CHECK_PASTRY_QUANTITY
        BEFORE INSERT ON PASTRY_ORDER
        FOR EACH ROW
    BEGIN
        IF :NEW.QUANTITY_PASTRY <= 0 THEN
            RAISE_APPLICATION_ERROR(-20010, 'Počet pečiva na objednávce musí být větší jak 0.');
        END IF;
    END;
    /

    -- SHOW TRIGGERS
    -- SHOW ERRORS TRIGGER CHECK_ORDER_DATE;
    -- SHOW ERRORS TRIGGER CHECK_PASTRY_QUANTITY;


    -- -----------------EXPLAIN PLAN----------------------
    -- prints out customers and number of orders they paid
    EXPLAIN PLAN FOR
    SELECT
        FIRSTNAME,
        LASTNAME,
        CONTACT,
        COUNT(ORDER_ID)
    FROM
        CUSTOMER_ORDER
        INNER JOIN CUSTOMER ON CUSTOMER_ID = CUSTOMER_FK
    WHERE PAID = 1
    GROUP BY FIRSTNAME, LASTNAME, CONTACT
    ORDER BY FIRSTNAME, LASTNAME;

    SELECT * FROM TABLE(DBMS_XPLAN.display());

    CREATE INDEX index_order_paid ON CUSTOMER_ORDER(PAID);

    EXPLAIN PLAN FOR
    SELECT
        FIRSTNAME,
        LASTNAME,
        CONTACT,
        COUNT(ORDER_ID)
    FROM
        CUSTOMER_ORDER
        INNER JOIN CUSTOMER ON CUSTOMER_ID = CUSTOMER_FK
    WHERE PAID = 1
    GROUP BY FIRSTNAME, LASTNAME, CONTACT
    ORDER BY FIRSTNAME, LASTNAME;

    SELECT * FROM TABLE(DBMS_XPLAN.display());

    DROP INDEX index_order_paid;


    -----------------PROCEDURES----------------------
    -- get status of specific order and update it
    CREATE OR REPLACE PROCEDURE ORDER_STATUS_UPDATE(ORDER_NUMBER INT)
    IS
        r_ORDER CUSTOMER_ORDER%ROWTYPE;
    BEGIN
        SELECT *
        INTO r_ORDER
        FROM CUSTOMER_ORDER
        WHERE ORDER_NUMBER = ORDER_ID;

        IF r_ORDER.ORDER_STATUS = 'Zpracovává se' AND r_ORDER.PAID = 1 THEN
            r_ORDER.ORDER_STATUS := 'Připravuje se';

        ELSIF r_ORDER.ORDER_STATUS = 'Zpracovává se' AND r_ORDER.PAID = 0 THEN
            r_ORDER.ORDER_STATUS := 'Zrušeno';

        ELSIF r_ORDER.ORDER_STATUS = 'Připravuje se' THEN
            r_ORDER.ORDER_STATUS := 'Čeká na odvoz';

        ELSIF r_ORDER.ORDER_STATUS = 'Čeká na odvoz' THEN
            r_ORDER.ORDER_STATUS := 'Dokončeno';
        END IF;

        UPDATE CUSTOMER_ORDER
        SET ORDER_STATUS = r_ORDER.ORDER_STATUS
        WHERE ORDER_NUMBER = ORDER_ID;
        DBMS_OUTPUT.PUT_LINE('Objednávka č.' || r_ORDER.ORDER_ID || ' aktualizována do stavu ' || r_ORDER.ORDER_STATUS);

    EXCEPTION
        WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20010,'Chyba procedury při aktualizaci stavu objednávky');
    END;
    /

    -- list all orders in specific status
    SET SERVEROUTPUT ON;
    CREATE OR REPLACE PROCEDURE ORDER_STATUS_LIST(STATUS IN VARCHAR)
    AS
        ORDER_ID CUSTOMER_ORDER.ORDER_ID%type;
        DATE_ORDER CUSTOMER_ORDER.DATE_ORDER%type;
        DATE_DEADLINE CUSTOMER_ORDER.DATE_DEADLINE%type;
        PAID CUSTOMER_ORDER.PAID%type;
        PRICE CUSTOMER_ORDER.PRICE%type;
        CUSTOMER_FK CUSTOMER_ORDER.CUSTOMER_FK%type;
        ORDER_STATUS CUSTOMER_ORDER.ORDER_STATUS%type;

        FIRSTNAME CUSTOMER.FIRSTNAME%type;
        LASTNAME CUSTOMER.LASTNAME%type;
        CONTACT CUSTOMER.CONTACT%type;
        CURSOR cur is
            SELECT
                ORDER_ID,
                DATE_ORDER,
                DATE_DEADLINE,
                PAID,
                PRICE,
                ORDER_STATUS,
                FIRSTNAME,
                LASTNAME,
                CONTACT
            FROM
                CUSTOMER_ORDER INNER JOIN CUSTOMER ON CUSTOMER_ID = CUSTOMER_FK;

    BEGIN
        DBMS_OUTPUT.PUT_LINE('Objednávky ve stavu: ' || STATUS);
        IF cur %ISOPEN THEN
            CLOSE cur ;
        END IF;
        OPEN cur;
        LOOP
            FETCH cur INTO
                ORDER_ID,
                DATE_ORDER,
                DATE_DEADLINE,
                PAID,
                PRICE,
                ORDER_STATUS,
                FIRSTNAME,
                LASTNAME,
                CONTACT;
            EXIT WHEN cur%notfound;

            IF ORDER_STATUS = STATUS THEN
                DBMS_OUTPUT.PUT_LINE('Objednávka: ' || ORDER_ID || ' Datum objednání: ' || DATE_ORDER ||
                ' Datum dodání: ' || DATE_DEADLINE || ' Zaplaceno: ' || PAID || ' Cena: ' || PRICE ||
                ' Stav: ' || ORDER_STATUS || ' Jméno: ' || FIRSTNAME || ' ' || LASTNAME || ' Tel: ' || CONTACT);
            END IF;
        END LOOP;
        CLOSE cur;
    END;
    /

    -- show procedures
    EXECUTE ORDER_STATUS_LIST('Dokončeno');
    EXECUTE ORDER_STATUS_UPDATE(3);


    -----------------MATERIALIZED VIEW----------------------
    -- print all cars and their drivers
    CREATE MATERIALIZED VIEW CARS_INFO
        CACHE
        BUILD IMMEDIATE
        ENABLE QUERY REWRITE
    AS SELECT
        SPZ,
        CAR_TYPE,
        KM,
        FUEL_PRICE,
        (FIRSTNAME || ' ' || LASTNAME) AS "EMPLOYEE",
        CONTACT
    FROM
        EMPLOYEE INNER JOIN DRIVER ON EMPLOYEE_ID = DRIVER_FK INNER JOIN CAR ON CAR_ID = CAR_FK;


    -----------------WITH CASE SELECT----------------------
    -- lookup orders and determine what priority they have based on average price of current orders in system
    WITH TEMP_AVERAGE_ORDER_PRICE(AVERAGE_PRICE) AS
    (SELECT AVG(PRICE) FROM CUSTOMER_ORDER WHERE ORDER_STATUS NOT IN ('Zrušeno'))

    SELECT
        ORDER_ID,
        (FIRSTNAME || ' ' || LASTNAME) AS "CUSTOMER",
        PRICE,
        CASE
        WHEN PRICE >= AVERAGE_PRICE THEN 'HIGH'
        ELSE 'LOW'
    END PRIORITY
    FROM
        TEMP_AVERAGE_ORDER_PRICE, CUSTOMER_ORDER
        INNER JOIN CUSTOMER ON CUSTOMER_ID = CUSTOMER_FK;


    -----------------PERMISSIONS----------------------
    GRANT ALL ON EMPLOYEE TO xdunck01;
    GRANT ALL ON DRIVER TO xdunck01;
    GRANT ALL ON BAKER TO xdunck01;
    GRANT ALL ON CUSTOMER TO xdunck01;
    GRANT ALL ON CAR TO xdunck01;
    GRANT ALL ON DELIVERY TO xdunck01;
    GRANT ALL ON CUSTOMER_ORDER TO xdunck01;
    GRANT ALL ON MATERIAL TO xdunck01;
    GRANT ALL ON PASTRY TO xdunck01;

    GRANT EXECUTE ON ORDER_STATUS_LIST TO xdunck01;
    GRANT EXECUTE ON ORDER_STATUS_UPDATE TO xdunck01;

    GRANT ALL ON CARS_INFO TO xdunck01;

SELECT * FROM v$version;